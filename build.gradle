apply plugin: "java"
apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin:'application'

sourceCompatibility = '1.7'

group = 'pnnl.goss.server'
version = '0.1.6-SNAPSHOT'

// Property added by application plugin
mainClassName = "pnnl.goss.server.ServerMain"

// Repository configuration.
repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}


dependencies {

    compile "commons-cli:commons-cli:$commonsCliVersion"

    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    //compile (group: "com.esyfur", name: "gradle-config-plugin", version: "$gradleConfigVersion")

    compile "org.eclipse.jetty.aggregate:jetty-all-server:$jettyVersion"
    compile "org.apache.activemq:activemq-all:$activemqVersion"
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-context:$springVersion"

    // Logging should be available to all projects
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"

    // Both client and server need access to the following dependencies
    compile "pnnl.goss:goss-core:$gossCoreVersion"
    compile "pnnl.goss:goss-core-server:$gossCoreVersion"
    compile "pnnl.goss.powergrid:powergrid-common:$gossPowergridVersion"
    compile "pnnl.goss.powergrid:powergrid-server:$gossPowergridVersion"
    compile "org.apache.felix:org.apache.felix.ipojo:$ipojoVersion"
    compile "org.apache.xbean:xbean-spring:$xbeanVersion"

    // For testing we are going to use these ubiquitous
    testCompile "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.spockframework:spock-core:$spockVersion"

}

buildscript {
    def gradleConfigVersion = '0.4.7'

    repositories { mavenCentral() }

    dependencies {
        classpath group: "com.esyfur", name: "gradle-config-plugin", version: "$gradleConfigVersion"
    }
}

//apply plugin: 'config'
//cfgutil.load('goss.properties')
//cfgutil.load('bin/pnnl.goss.core.cfg')


// This task is for creating a wrap script that can simply be
// downloaded and executed.  The doing of this remindes me
// allot of virtualenv for python.
task wrapper (type: Wrapper) { gradleVersion = "$gradleVersion" }

//apply from: 'goss.properties'
//apply plugin: 'config'
task printProps << {
    println config.activemq.host
    //println activemq.host
    //	 commandLineProjectProp
    //	println gradlePropertiesProp
    //	println systemProjectProp
    //	println envProjectProp
    //	println System.properties['system']
}
